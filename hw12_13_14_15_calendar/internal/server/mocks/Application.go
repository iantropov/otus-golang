// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/iantropov/otus-golang/hw12_13_14_15_calendar/internal/storage"

	time "time"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *Application) CreateEvent(ctx context.Context, event storage.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *Application) DeleteEvent(ctx context.Context, id storage.EventID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.EventID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: ctx, id
func (_m *Application) GetEvent(ctx context.Context, id storage.EventID) (storage.Event, error) {
	ret := _m.Called(ctx, id)

	var r0 storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.EventID) (storage.Event, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.EventID) storage.Event); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.EventID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventForDay provides a mock function with given fields: ctx, day
func (_m *Application) ListEventForDay(ctx context.Context, day time.Time) []storage.Event {
	ret := _m.Called(ctx, day)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []storage.Event); ok {
		r0 = rf(ctx, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	return r0
}

// ListEventForMonth provides a mock function with given fields: ctx, monthStart
func (_m *Application) ListEventForMonth(ctx context.Context, monthStart time.Time) []storage.Event {
	ret := _m.Called(ctx, monthStart)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []storage.Event); ok {
		r0 = rf(ctx, monthStart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	return r0
}

// ListEventForWeek provides a mock function with given fields: ctx, weekStart
func (_m *Application) ListEventForWeek(ctx context.Context, weekStart time.Time) []storage.Event {
	ret := _m.Called(ctx, weekStart)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []storage.Event); ok {
		r0 = rf(ctx, weekStart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: ctx, id, event
func (_m *Application) UpdateEvent(ctx context.Context, id storage.EventID, event storage.Event) error {
	ret := _m.Called(ctx, id, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.EventID, storage.Event) error); ok {
		r0 = rf(ctx, id, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewApplication interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplication(t mockConstructorTestingTNewApplication) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
